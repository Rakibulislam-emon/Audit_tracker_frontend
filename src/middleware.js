// src/middleware.js
import { jwtVerify } from "jose";
import { NextResponse } from "next/server";

export async function middleware(request) {
  const token = request.cookies.get("token")?.value;
  const currentPath = request.nextUrl.pathname;

  // ‚úÖ Public routes (‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶®‡¶æ)
  const publicRoutes = ["/auth/login"];

  const isPublicRoute = publicRoutes.some(
    (route) => currentPath === route || currentPath.startsWith(route + "/")
  );

  // üö´ Static assets ‡¶õ‡¶æ‡¶°‡¶º ‡¶¶‡¶ø‡¶® (Next.js-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø)
  if (
    currentPath.startsWith("/_next") ||
    currentPath.startsWith("/favicon.ico") ||
    currentPath.match(/\.(png|jpg|jpeg|svg|gif|ico)$/i)
  ) {
    return NextResponse.next();
  }

  // üîì 1. ‡¶Ø‡¶¶‡¶ø ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï ‡¶∞‡ßÅ‡¶ü ‡¶π‡¶Ø‡¶º ‚Üí ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶¶‡¶ø‡¶®
  if (isPublicRoute) {
    // ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º ‡¶•‡¶æ‡¶ï‡ßá ‚Üí ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®
    if (token) {
      try {
        const secret = new TextEncoder().encode(process.env.JWT_SECRET);
        const { payload } = await jwtVerify(token, secret);
        const role = payload.role;
        const dashboardPath = `/dashboard/${role}`;
        return NextResponse.redirect(new URL(dashboardPath, request.url));
      } catch (e) {
        // Token invalid ‚Üí login page-‡¶è ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®
        return NextResponse.next();
      }
    }
    return NextResponse.next();
  }

  // üîí 2. ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶∞‡ßÅ‡¶ü ‡¶π‡¶Ø‡¶º (‡¶Ø‡ßá‡¶Æ‡¶®: /, /dashboard, ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø)
  if (!token) {
    // ‡¶≤‡¶ó‡¶á‡¶® ‡¶®‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá ‚Üí login page
    return NextResponse.redirect(new URL("/auth/login", request.url));
  }

  try {
    const secret = new TextEncoder().encode(process.env.JWT_SECRET);
    const { payload } = await jwtVerify(token, secret);
    const role = payload.role;

    const allowedRoles = ["admin", "auditor", "compliance"];
    if (!allowedRoles.includes(role)) {
      return NextResponse.redirect(new URL("/auth/login", request.url));
    }

    const expectedPath = `/dashboard/${role}`;

    // ‡¶Ø‡¶¶‡¶ø /dashboard ‡¶¨‡¶æ ‡¶≠‡ßÅ‡¶≤ ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶¢‡ßÅ‡¶ï‡ßá ‡¶•‡¶æ‡¶ï‡ßá
    if (currentPath.startsWith("/dashboard") && currentPath !== expectedPath) {
      return NextResponse.redirect(new URL(expectedPath, request.url));
    }

    return NextResponse.next();
  } catch (error) {
    console.error("Auth failed:", error.message);
    return NextResponse.redirect(new URL("/auth/login", request.url));
  }
}

// üõ°Ô∏è ‡¶∏‡¶¨ ‡¶∞‡ßÅ‡¶ü‡ßá middleware apply ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶∂‡ßÅ‡¶ß‡ßÅ static assets ‡¶¨‡¶æ‡¶¶)

export const config = {
  matcher: [
    "/((?!_next/static|_next/image|favicon.ico|.*\\.(?:png|jpg|jpeg|svg|gif)$).*)",
  ],
};